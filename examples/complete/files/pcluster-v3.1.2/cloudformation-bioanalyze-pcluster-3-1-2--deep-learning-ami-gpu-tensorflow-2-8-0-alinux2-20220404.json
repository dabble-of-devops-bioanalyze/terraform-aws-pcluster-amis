{
    "TemplateBody": "Parameters:\n  CfnParamChefCookbook:\n    Default: ''\n    Description: ChefCookbook\n    Type: String\n  CfnParamChefDnaJson:\n    Default: '{\"cluster\": {\"base_os\": \"{{ build.OperatingSystemName.outputs.stdout\n      }}\", \"custom_awsbatchcli_package\": \"\", \"custom_node_package\": \"\", \"is_official_ami_build\":\n      \"false\", \"nvidia\": {\"enabled\": \"no\"}, \"region\": \"{{ build.AWSRegion.outputs.stdout\n      }}\"}}'\n    Description: ChefAttributes\n    Type: String\n  CfnParamCincInstaller:\n    Default: ''\n    Description: CincInstaller\n    Type: String\n  CfnParamCookbookVersion:\n    Default: 3.1.2\n    Description: CookbookVersion\n    Type: String\n  CfnParamUpdateOsAndReboot:\n    Default: 'false'\n    Description: UpdateOsAndReboot\n    Type: String\nResources:\n  BuildNotificationSubscription:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      Endpoint:\n        Fn::GetAtt:\n        - DeleteStackFunction\n        - Arn\n      Protocol: lambda\n      TopicArn:\n        Ref: BuildNotificationTopic\n    Type: AWS::SNS::Subscription\n  BuildNotificationTopic:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      Tags:\n      - Key: Environment\n        Value: ue2\n      - Key: Name\n        Value: eg-ue2-test-example\n      - Key: Namespace\n        Value: eg\n      - Key: parallelcluster:image_id\n        Value: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n      - Key: parallelcluster:image_name\n        Value: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU TensorFlow 2.8.0 Amazon\n          Linux 2 20220404\n      - Key: ParentAmiId\n        Value: ami-0bf136df2e5a2e3a5\n      - Key: ParentAmiName\n        Value: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n      - Key: Stage\n        Value: test\n      TopicName:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n    Type: AWS::SNS::Topic\n  DeleteStackFunction:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    - DeleteStackFunctionLog\n    Properties:\n      Code:\n        S3Bucket: parallelcluster-cc2a673147cc5941-v1-do-not-delete\n        S3Key: parallelcluster/3.1.2/images/bioanalyze-pcluster-3-1-2--deep-learning-ami-g-cuiczz33zvnvc7uq/custom_resources/artifacts.zip\n      Environment:\n        Variables:\n          IMAGE_STACK_ARN:\n            Ref: AWS::StackId\n      FunctionName:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Handler: delete_image_stack.handler\n      MemorySize: 128\n      Role:\n        Fn::GetAtt:\n        - DeleteStackFunctionExecutionRole\n        - Arn\n      Runtime: python3.8\n      Tags:\n      - Key: Environment\n        Value: ue2\n      - Key: Name\n        Value: eg-ue2-test-example\n      - Key: Namespace\n        Value: eg\n      - Key: parallelcluster:image_id\n        Value: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n      - Key: parallelcluster:image_name\n        Value: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU TensorFlow 2.8.0 Amazon\n          Linux 2 20220404\n      - Key: ParentAmiId\n        Value: ami-0bf136df2e5a2e3a5\n      - Key: ParentAmiName\n        Value: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n      - Key: Stage\n        Value: test\n      Timeout: 900\n    Type: AWS::Lambda::Function\n  DeleteStackFunctionExecutionRole:\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action: sts:AssumeRole\n          Effect: Allow\n          Principal:\n            Service: lambda.amazonaws.com\n        Version: '2012-10-17'\n      ManagedPolicyArns:\n      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Path: /parallelcluster/\n      Policies:\n      - PolicyDocument:\n          Statement:\n          - Action: iam:DeleteRole\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':iam::'\n                - Ref: AWS::AccountId\n                - :role/parallelcluster/ParallelClusterImage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action: iam:DeleteInstanceProfile\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':iam::'\n                - Ref: AWS::AccountId\n                - :instance-profile/parallelcluster/ParallelClusterImage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action: imagebuilder:DeleteInfrastructureConfiguration\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':imagebuilder:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :infrastructure-configuration/parallelclusterimage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action: imagebuilder:DeleteComponent\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':imagebuilder:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :component/parallelclusterimage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n                - /*\n          - Action: imagebuilder:DeleteComponent\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':imagebuilder:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :component/parallelclusterimage-tag-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n                - /*\n          - Action: imagebuilder:DeleteComponent\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':imagebuilder:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :component/parallelclusterimage-validate-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n                - /*\n          - Action: imagebuilder:DeleteComponent\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':imagebuilder:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :component/parallelclusterimage-test-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n                - /*\n          - Action: imagebuilder:DeleteImageRecipe\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':imagebuilder:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :image-recipe/parallelclusterimage-bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404/*\n          - Action: imagebuilder:DeleteDistributionConfiguration\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':imagebuilder:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :distribution-configuration/parallelclusterimage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action: imagebuilder:DeleteImage\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':imagebuilder:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :image/parallelclusterimage-bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404/*\n          - Action: cloudformation:DeleteStack\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':cloudformation:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :stack/bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404/\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action: ec2:CreateTags\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':ec2:'\n                - Ref: AWS::Region\n                - ::image/*\n          - Action: tag:TagResources\n            Effect: Allow\n            Resource: '*'\n          - Action:\n            - iam:DetachRolePolicy\n            - iam:DeleteRole\n            - iam:DeleteRolePolicy\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':iam::'\n                - Ref: AWS::AccountId\n                - :role/parallelcluster/ParallelClusterImageCleanup-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action:\n            - lambda:DeleteFunction\n            - lambda:RemovePermission\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':lambda:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :function:ParallelClusterImage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action: logs:DeleteLogGroup\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':logs:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :log-group:/aws/lambda/ParallelClusterImage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n                - :*\n          - Action: iam:RemoveRoleFromInstanceProfile\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':iam::'\n                - Ref: AWS::AccountId\n                - :instance-profile/parallelcluster/ParallelClusterImage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action:\n            - iam:DetachRolePolicy\n            - iam:DeleteRolePolicy\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':iam::'\n                - Ref: AWS::AccountId\n                - :role/parallelcluster/ParallelClusterImage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          - Action:\n            - SNS:GetTopicAttributes\n            - SNS:DeleteTopic\n            - SNS:Unsubscribe\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':sns:'\n                - Ref: AWS::Region\n                - ':'\n                - Ref: AWS::AccountId\n                - :ParallelClusterImage-\n                - Fn::Select:\n                  - 2\n                  - Fn::Split:\n                    - /\n                    - Ref: AWS::StackId\n          Version: '2012-10-17'\n        PolicyName: LambdaCleanupPolicy\n      RoleName:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImageCleanup-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Tags:\n      - Key: Environment\n        Value: ue2\n      - Key: Name\n        Value: eg-ue2-test-example\n      - Key: Namespace\n        Value: eg\n      - Key: parallelcluster:image_id\n        Value: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n      - Key: parallelcluster:image_name\n        Value: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU TensorFlow 2.8.0 Amazon\n          Linux 2 20220404\n      - Key: ParentAmiId\n        Value: ami-0bf136df2e5a2e3a5\n      - Key: ParentAmiName\n        Value: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n      - Key: Stage\n        Value: test\n    Type: AWS::IAM::Role\n  DeleteStackFunctionLog:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      LogGroupName:\n        Fn::Join:\n        - ''\n        - - /aws/lambda/ParallelClusterImage-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n    Type: AWS::Logs::LogGroup\n  DeleteStackFunctionPermission:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - DeleteStackFunction\n        - Arn\n      Principal: sns.amazonaws.com\n      SourceArn:\n        Ref: BuildNotificationTopic\n    Type: AWS::Lambda::Permission\n  DistributionConfiguration:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      Distributions:\n      - AmiDistributionConfiguration:\n          AmiTags:\n            Name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU TensorFlow 2.8.0\n              Amazon Linux 2 20220404\n            ParentAmiID: ami-0bf136df2e5a2e3a5\n            ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n            Version: '1.0'\n            parallelcluster:build_config: s3://parallelcluster-cc2a673147cc5941-v1-do-not-delete/parallelcluster/3.1.2/images/bioanalyze-pcluster-3-1-2--deep-learning-ami-g-cuiczz33zvnvc7uq/configs/image-config.yaml\n            parallelcluster:build_log:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':logs:us-east-1:'\n                - Ref: AWS::AccountId\n                - :log-group:/aws/imagebuilder/ParallelClusterImage-bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n            parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n            parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI\n              GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n            parallelcluster:s3_bucket: parallelcluster-cc2a673147cc5941-v1-do-not-delete\n            parallelcluster:s3_image_dir: parallelcluster/3.1.2/images/bioanalyze-pcluster-3-1-2--deep-learning-ami-g-cuiczz33zvnvc7uq\n            parallelcluster:version: 3.1.2\n          Name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU TensorFlow 2.8.0 Amazon\n            Linux 2 20220404 {{ imagebuilder:buildDate }}\n        Region:\n          Ref: AWS::Region\n      Name:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Tags:\n        Environment: ue2\n        Name: eg-ue2-test-example\n        Namespace: eg\n        ParentAmiId: ami-0bf136df2e5a2e3a5\n        ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n        Stage: test\n        parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n        parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU\n          TensorFlow 2.8.0 Amazon Linux 2 20220404\n    Type: AWS::ImageBuilder::DistributionConfiguration\n  ImageRecipe:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      BlockDeviceMappings:\n      - DeviceName: /dev/xvda\n        Ebs:\n          Encrypted: false\n          VolumeSize: 62\n          VolumeType: gp2\n      Components:\n      - ComponentArn:\n          Ref: ParallelClusterComponent\n      - ComponentArn:\n          Ref: ParallelClusterTagComponent\n      - ComponentArn: arn:aws:imagebuilder:us-east-1:aws:component/python-3-linux/1.0.1/1\n      - ComponentArn: arn:aws:imagebuilder:us-east-1:aws:component/amazon-cloudwatch-agent-linux/1.0.1/1\n      - ComponentArn: arn:aws:imagebuilder:us-east-1:aws:component/aws-cli-version-2-linux/1.0.3/1\n      - ComponentArn: arn:aws:imagebuilder:us-east-1:018835827632:component/eg-ue2-test-example-scientific-stack-component/1.0.0/1\n      - ComponentArn:\n          Ref: ParallelClusterValidateComponent\n      - ComponentArn:\n          Ref: ParallelClusterTestComponent\n      Name: ParallelClusterImage-bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n      ParentImage: ami-0bf136df2e5a2e3a5\n      Tags:\n        Environment: ue2\n        Name: eg-ue2-test-example\n        Namespace: eg\n        ParentAmiId: ami-0bf136df2e5a2e3a5\n        ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n        Stage: test\n        parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n        parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU\n          TensorFlow 2.8.0 Amazon Linux 2 20220404\n      Version: 3.1.2\n    Type: AWS::ImageBuilder::ImageRecipe\n  InfrastructureConfiguration:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      InstanceProfileName:\n        Ref: InstanceProfile\n      InstanceTypes:\n      - t3a.medium\n      Name:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      SnsTopicArn:\n        Ref: BuildNotificationTopic\n      Tags:\n        Environment: ue2\n        Name: eg-ue2-test-example\n        Namespace: eg\n        ParentAmiId: ami-0bf136df2e5a2e3a5\n        ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n        Stage: test\n        parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n        parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU\n          TensorFlow 2.8.0 Amazon Linux 2 20220404\n      TerminateInstanceOnFailure: true\n    Type: AWS::ImageBuilder::InfrastructureConfiguration\n  InstanceProfile:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      InstanceProfileName:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Path: /parallelcluster/\n      Roles:\n      - Ref: InstanceRole\n    Type: AWS::IAM::InstanceProfile\n  InstanceRole:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action: sts:AssumeRole\n          Effect: Allow\n          Principal:\n            Service:\n              Fn::Join:\n              - ''\n              - - ec2.\n                - Ref: AWS::URLSuffix\n        Version: '2012-10-17'\n      ManagedPolicyArns:\n      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\n      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder\n      Path: /parallelcluster/\n      Policies:\n      - PolicyDocument:\n          Statement:\n          - Action:\n            - ec2:CreateTags\n            - ec2:ModifyImageAttribute\n            Effect: Allow\n            Resource:\n              Fn::Join:\n              - ''\n              - - 'arn:'\n                - Ref: AWS::Partition\n                - ':ec2:'\n                - Ref: AWS::Region\n                - ::image/*\n          Version: '2012-10-17'\n        PolicyName: InstanceRoleInlinePolicy\n      RoleName:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Tags:\n      - Key: Environment\n        Value: ue2\n      - Key: Name\n        Value: eg-ue2-test-example\n      - Key: Namespace\n        Value: eg\n      - Key: parallelcluster:image_id\n        Value: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n      - Key: parallelcluster:image_name\n        Value: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU TensorFlow 2.8.0 Amazon\n          Linux 2 20220404\n      - Key: ParentAmiId\n        Value: ami-0bf136df2e5a2e3a5\n      - Key: ParentAmiName\n        Value: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n      - Key: Stage\n        Value: test\n    Type: AWS::IAM::Role\n  ParallelClusterComponent:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      Data:\n        Fn::Sub: \"constants:\\n- ChefVersion:\\n    type: string\\n    value: 17.2.29\\n\\\n          - BerkshelfVersion:\\n    type: string\\n    value: 7.2.0\\n- FailExitCode:\\n\\\n          \\    type: string\\n    value: 1\\ndescription: Bake PCluster AMI\\nname: PCluster\\n\\\n          phases:\\n- name: build\\n  steps:\\n  - action: ExecuteBash\\n    inputs:\\n\\\n          \\      commands:\\n      - 'set -v\\n\\n        echo ${AWS::Region}\\n\\n   \\\n          \\     '\\n    name: AWSRegion\\n  - action: ExecuteBash\\n    inputs:\\n   \\\n          \\   commands:\\n      - 'set -v\\n\\n        echo \\\"aws-parallelcluster-cookbook-${CfnParamCookbookVersion}\\\"\\\n          \\n\\n        '\\n    name: PClusterCookbookVersionName\\n  - action: ExecuteBash\\n\\\n          \\    inputs:\\n      commands:\\n      - 'set -v\\n\\n        COOKBOOK_URL=\\\"\\\n          https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${AWS::URLSuffix}/parallelcluster/${CfnParamCookbookVersion}/cookbooks/{{\\n\\\n          \\        build.PClusterCookbookVersionName.outputs.stdout }}.tgz\\\"\\n\\n \\\n          \\       [ -n \\\"${CfnParamChefCookbook}\\\" ] && COOKBOOK_URL=\\\"${CfnParamChefCookbook}\\\"\\\n          \\n\\n        echo \\\"${!COOKBOOK_URL}\\\"\\n\\n        '\\n    name: CookbookUrl\\n\\\n          \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - 'set -v\\n\\\n          \\n        CINC_URL=\\\"https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${AWS::URLSuffix}/archives/cinc/cinc-install-1.1.0.sh\\\"\\\n          \\n\\n        [ -n \\\"${CfnParamCincInstaller}\\\" ] && CINC_URL=\\\"${CfnParamCincInstaller}\\\"\\\n          \\n\\n        echo \\\"${!CINC_URL}\\\"\\n\\n        '\\n    name: CincUrl\\n  - action:\\\n          \\ ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -v\\\\nFILE=/etc/os-release\\\\\\\n          nif [ -e ${!FILE} ]; then\\\\n  . ${!FILE}\\\\n  echo\\\\\\n        \\\\ \\\\\\\"${!ID}${!VERSION_ID:+.${!VERSION_ID}}\\\\\\\n          \\\"\\\\nelse\\\\n  echo \\\\\\\"The file '${!FILE}'\\\\\\n        \\\\ does not exist.\\\n          \\ Failing build.\\\\\\\"\\\\n  exit {{ FailExitCode }}\\\\nfi\\\\n\\\"\\n    name: OperatingSystemRelease\\n\\\n          \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -v\\\\\\\n          nRELEASE='{{ build.OperatingSystemRelease.outputs.stdout }}'\\\\n\\\\nif\\\\\\n\\\n          \\        \\\\ [ `echo \\\\\\\"${!RELEASE}\\\\\\\" | grep -w '^amzn\\\\\\\\.2'` ]; then\\\\\\\n          n  OS='alinux2'\\\\n\\\\\\n        elif [ `echo \\\\\\\"${!RELEASE}\\\\\\\" | grep '^centos\\\\\\\n          \\\\.7'` ]; then\\\\n  OS='centos7'\\\\n\\\\\\n        elif [ `echo \\\\\\\"${!RELEASE}\\\\\\\n          \\\" | grep '^ubuntu\\\\\\\\.18'` ]; then\\\\n  OS='ubuntu1804'\\\\n\\\\\\n        elif\\\n          \\ [ `echo \\\\\\\"${!RELEASE}\\\\\\\" | grep '^ubuntu\\\\\\\\.20'` ]; then\\\\n  OS='ubuntu2004'\\\\\\\n          n\\\\\\n        else\\\\n  echo \\\\\\\"Operating System '${!RELEASE}' is not supported.\\\n          \\ Failing build.\\\\\\\"\\\\\\n        \\\\n  exit {{ FailExitCode }}\\\\nfi\\\\n\\\\necho\\\n          \\ ${!OS}\\\\n\\\"\\n    name: OperatingSystemName\\n  - action: ExecuteBash\\n\\\n          \\    inputs:\\n      commands:\\n      - \\\"set -v\\\\nOS='{{ build.OperatingSystemName.outputs.stdout\\\n          \\ }}'\\\\n\\\\nif [ `echo\\\\\\n        \\\\ \\\\\\\"${!OS}\\\\\\\" | grep -E '^(alinux|centos)'`\\\n          \\ ]; then\\\\n  PLATFORM='RHEL'\\\\nelif\\\\\\n        \\\\ [ `echo \\\\\\\"${!OS}\\\\\\\"\\\n          \\ | grep -E '^ubuntu'` ]; then\\\\n  PLATFORM='DEBIAN'\\\\nfi\\\\n\\\\\\n       \\\n          \\ \\\\necho ${!PLATFORM}\\\\n\\\"\\n    name: PlatformName\\n  - action: ExecuteBash\\n\\\n          \\    inputs:\\n      commands:\\n      - 'set -v\\n\\n        BUCKET=\\\"s3.amazonaws.com\\\"\\\n          \\n\\n        [[ ${AWS::Region} =~ ^cn- ]] && BUCKET=\\\"s3.cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster\\\"\\\n          \\n\\n        echo \\\"https://${!BUCKET}/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz\\\"\\\n          \\n\\n        '\\n    name: CfnBootstrapUrl\\n  - action: ExecuteBash\\n    inputs:\\n\\\n          \\      commands:\\n      - \\\"set -v\\\\nARCH=$(uname -m)\\\\ncase ${!ARCH} in\\\\\\\n          n  'x86_64')\\\\n    echo 'x86_64'\\\\n\\\\\\n        \\\\    ;;\\\\n  'aarch64')\\\\\\\n          n    echo 'arm64'\\\\n    ;;\\\\n  *)\\\\n    echo \\\\\\\"The '${!ARCH}'\\\\\\n    \\\n          \\    \\\\ architecture is not supported. Failing build.\\\\\\\"\\\\n    exit {{\\\n          \\ FailExitCode\\\\\\n        \\\\ }}\\\\n    ;;\\\\nesac\\\\n\\\"\\n    name: OperatingSystemArchitecture\\n\\\n          \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -v\\\\\\\n          nif [ ${CfnParamUpdateOsAndReboot} == false ]; then\\\\n  RELEASE='{{\\\\\\n\\\n          \\        \\\\ build.OperatingSystemRelease.outputs.stdout }}'\\\\n  if [ `echo\\\n          \\ \\\\\\\"${!RELEASE}\\\\\\\"\\\\\\n        \\\\ | grep -Ev '^(amzn|centos|ubuntu)'`\\\n          \\ ]; then\\\\n    echo \\\\\\\"This component does\\\\\\n        \\\\ not support '${!RELEASE}'.\\\n          \\ Failing build.\\\\\\\"\\\\n    exit {{ FailExitCode }}\\\\n\\\\\\n        \\\\  fi\\\\\\\n          n\\\\n  # This component only supports aarch64 CPUs on Amazon Linux 2,\\\\\\n\\\n          \\        \\\\ Ubuntu1804, Ubuntu2004 and Centos7\\\\n  ARCH=$(uname -m)\\\\n \\\n          \\ if [[ `echo ${!ARCH}`\\\\\\n        \\\\ == 'aarch64' ]]; then\\\\n    if [ `echo\\\n          \\ \\\\\\\"${!RELEASE}\\\\\\\" | grep -Ev '^(amzn\\\\\\\\\\\\\\n        .2|centos\\\\\\\\.7|ubuntu\\\\\\\n          \\\\.18\\\\\\\\.04|ubuntu\\\\\\\\.20\\\\\\\\.04)'` ]; then\\\\n      echo \\\\\\\"\\\\\\n     \\\n          \\   This component does not support '${!RELEASE}' on ARM64 CPUs. Failing\\\n          \\ build.\\\\\\\"\\\\\\n        \\\\n      exit {{ FailExitCode }}\\\\n    fi\\\\n  fi\\\\\\\n          nfi\\\\n\\\"\\n    name: IsOperatingSystemSupported\\n  - action: ExecuteBash\\n\\\n          \\    inputs:\\n      commands:\\n      - \\\"set -v\\\\nOS='{{ build.OperatingSystemName.outputs.stdout\\\n          \\ }}'\\\\nPLATFORM='{{\\\\\\n        \\\\ build.PlatformName.outputs.stdout }}'\\\\\\\n          n\\\\nif [[ ${!PLATFORM} == RHEL ]];\\\\\\n        \\\\ then\\\\n  if [[ ${!OS} ==\\\n          \\ centos7 ]]; then\\\\n    yum -y install epel-release\\\\n\\\\\\n        \\\\  fi\\\\\\\n          n  yum -y groupinstall development && sudo yum -y install curl wget\\\\\\n\\\n          \\        \\\\ jq\\\\n\\\\n  if [[ ${!OS} =~ ^centos ]]; then\\\\n    /bin/sed -r\\\n          \\ -i -e 's/SELINUX=enforcing/SELINUX=permissive/'\\\\\\n        \\\\ /etc/selinux/config\\\\\\\n          n    grub2-mkconfig -o /boot/grub2/grub.cfg\\\\n  fi\\\\n\\\\\\n        elif [[\\\n          \\ ${!PLATFORM} == DEBIAN ]]; then\\\\n  if [[ \\\\\\\"${CfnParamUpdateOsAndReboot}\\\\\\\n          \\\"\\\\\\n        \\\\ == \\\\\\\"false\\\\\\\" ]]; then\\\\n    flock $(apt-config shell\\\n          \\ StateDir Dir::State/d\\\\\\n        \\\\ | sed -r \\\\\\\"s/.*'(.*)\\\\\\\\/?'$/\\\\\\\\\\\n          1/\\\\\\\")/daily_lock systemctl disable --now apt-daily.timer\\\\\\n        \\\\\\\n          \\ apt-daily.service apt-daily-upgrade.timer apt-daily-upgrade.service\\\\\\\n          n  \\\\\\n        \\\\  sed \\\\\\\"/Update-Package-Lists/s/\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"/\\\\\\\\\\\n          \\\\\\\"0\\\\\\\\\\\\\\\"/; /Unattended-Upgrade/s/\\\\\\\\\\\\\\n        \\\\\\\"1\\\\\\\\\\\\\\\"/\\\\\\\\\\\n          \\\\\\\"0\\\\\\\\\\\\\\\"/;\\\\\\\" /etc/apt/apt.conf.d/20auto-upgrades > \\\\\\\"/etc/apt/apt.conf.d/51pcluster-unattended-upgrades\\\\\\\n          \\\"\\\\\\n        \\\\n  fi\\\\n  apt-cache search build-essential\\\\n  apt-get clean\\\\\\\n          n  apt-get -y\\\\\\n        \\\\ update\\\\n  apt-get -y install build-essential\\\n          \\ curl wget jq\\\\nfi\\\\n\\\"\\n    name: InstallPrerequisite\\n  - action: ExecuteBash\\n\\\n          \\    inputs:\\n      commands:\\n      - 'set -v\\n\\n        curl --retry 3\\\n          \\ -L {{ build.CincUrl.outputs.stdout }} | bash -s -- -v {{ ChefVersion\\n\\\n          \\        }}\\n\\n        /opt/cinc/embedded/bin/gem install --no-document\\\n          \\ berkshelf:{{ BerkshelfVersion\\n        }}\\n\\n        '\\n    name: InstallCinc\\n\\\n          \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -v\\\\\\\n          nmkdir -p /etc/chef && sudo chown -R root:root /etc/chef\\\\ncurl --retry\\\\\\\n          \\n        \\\\ 3 -L -o /etc/chef/aws-parallelcluster-cookbook.tgz \\\\\\\"{{ build.CookbookUrl.outputs.stdout\\\\\\\n          \\n        \\\\ }}\\\\\\\"\\\\n\\\\nmkdir /tmp/cookbooks\\\\ncd /tmp/cookbooks\\\\ntar\\\n          \\ -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\\\\n\\\\\\n        \\\\nexport\\\n          \\ HOME=\\\\\\\"/tmp\\\\\\\"\\\\nfor dir in $(ls /tmp/cookbooks); do\\\\n  cd /tmp/cookbooks/${!dir}\\\\\\\n          n\\\\\\n        \\\\  LANG=en_US.UTF-8 sudo /opt/cinc/embedded/bin/berks vendor\\\n          \\ /etc/chef/cookbooks\\\\\\n        \\\\ --delete || (echo 'Vendoring cookbook\\\n          \\ failed.' && exit {{ FailExitCode }})\\\\n\\\\\\n        done;\\\\n\\\"\\n    name:\\\n          \\ DownloadCookbook\\n  - action: CreateFile\\n    inputs:\\n    - content:\\\n          \\ 'cookbook_path [''/etc/chef/cookbooks'']\\n\\n        '\\n      overwrite:\\\n          \\ true\\n      path: /etc/chef/client.rb\\n    name: CreatingChefClientFile\\n\\\n          \\  - action: CreateFile\\n    inputs:\\n    - content: '${CfnParamChefDnaJson}\\n\\\n          \\n        '\\n      overwrite: true\\n      path: /etc/parallelcluster/image_dna.json\\n\\\n          \\    name: CreatingJsonFile\\n  - action: ExecuteBash\\n    inputs:\\n    \\\n          \\  commands:\\n      - 'set -v\\n\\n        echo \\\"Calling chef-client with\\\n          \\ /etc/parallelcluster/image_dna.json\\\"\\n\\n        cat /etc/parallelcluster/image_dna.json\\n\\\n          \\n        cinc-client --local-mode --config /etc/chef/client.rb --log_level\\\n          \\ info --force-formatter\\n        --no-color --chef-zero-port 8889 --json-attributes\\\n          \\ /etc/parallelcluster/image_dna.json\\n        --override-runlist aws-parallelcluster::default\\n\\\n          \\n        '\\n    name: InstallPClusterPackages\\n  - action: ExecuteBash\\n\\\n          \\    inputs:\\n      commands:\\n      - \\\"set -v\\\\nOS='{{ build.OperatingSystemName.outputs.stdout\\\n          \\ }}'\\\\n\\\\nif [[ ${!OS}\\\\\\n        \\\\ =~ ^(centos7|ubuntu(18|20)04)$ ]];\\\n          \\ then\\\\n  curl --retry 3 -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz\\\\\\n\\\n          \\        \\\\ {{ build.CfnBootstrapUrl.outputs.stdout }}\\\\n  pip3 install\\\n          \\ /tmp/aws-cfn-bootstrap-latest.tar.gz\\\\n\\\\\\n        fi\\\\n\\\"\\n    name:\\\n          \\ InstallCfnBootstrap\\n  - action: CreateFile\\n    inputs:\\n    - content:\\\n          \\ '{{ build.PClusterCookbookVersionName.outputs.stdout }}\\n\\n        '\\n\\\n          \\      overwrite: true\\n      path: /opt/parallelcluster/.bootstrapped\\n\\\n          \\    name: CreateBootstrapFile\\n  - action: ExecuteBash\\n    inputs:\\n \\\n          \\     commands:\\n      - \\\"set -v\\\\nif [[ -f /tmp/imagebuilder_service/ssm_installed\\\n          \\ ]]; then\\\\n  echo\\\\\\n        \\\\ \\\\\\\"Keeping SSM agent installed\\\\\\\"\\\\\\\n          n  rm -rf /tmp/imagebuilder_service/ssm_installed\\\\n\\\\\\n        else\\\\n\\\n          \\   echo \\\\\\\"SSM agent is installed by default\\\\\\\"\\\\nfi\\\\n\\\"\\n    name:\\\n          \\ KeepSSM\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n     \\\n          \\ - 'set -v\\n\\n        /usr/local/sbin/ami_cleanup.sh\\n\\n        '\\n   \\\n          \\ name: AmiCleanup\\n- name: validate\\n  steps:\\n  - action: ExecuteBash\\n\\\n          \\    inputs:\\n      commands:\\n      - 'echo \\\"Check ParallelCluster software\\\n          \\ stack has been installed\\\"\\n\\n        '\\n    name: PClusterValidate\\n\\\n          schemaVersion: 1.0\\n\"\n      Description: Install ParallelCluster software stack\n      Name:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Platform: Linux\n      Tags:\n        Environment: ue2\n        Name: eg-ue2-test-example\n        Namespace: eg\n        ParentAmiId: ami-0bf136df2e5a2e3a5\n        ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n        Stage: test\n        parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n        parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU\n          TensorFlow 2.8.0 Amazon Linux 2 20220404\n      Version: 3.1.2\n    Type: AWS::ImageBuilder::Component\n  ParallelClusterImage:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      DistributionConfigurationArn:\n        Ref: DistributionConfiguration\n      EnhancedImageMetadataEnabled: false\n      ImageRecipeArn:\n        Ref: ImageRecipe\n      InfrastructureConfigurationArn:\n        Ref: InfrastructureConfiguration\n      Tags:\n        Environment: ue2\n        Name: eg-ue2-test-example\n        Namespace: eg\n        ParentAmiId: ami-0bf136df2e5a2e3a5\n        ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n        Stage: test\n        parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n        parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU\n          TensorFlow 2.8.0 Amazon Linux 2 20220404\n    Type: AWS::ImageBuilder::Image\n  ParallelClusterTagComponent:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      Data: \"description: Tag ParallelCluster AMI\\nname: ParallelClusterTag\\nphases:\\n\\\n        - name: test\\n  steps:\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n\\\n        \\      - 'set -v\\n\\n        IMDS_TOKEN=$(curl --retry 3 --retry-delay 0 -s\\\n        \\ --fail -X PUT \\\"http://169.254.169.254/latest/api/token\\\"\\n        -H \\\"\\\n        X-aws-ec2-metadata-token-ttl-seconds: 300\\\")\\n\\n        AMI_ID=$(curl --retry\\\n        \\ 3 --retry-delay 0 -s --fail -H \\\"X-aws-ec2-metadata-token:\\n        ${IMDS_TOKEN}\\\"\\\n        \\ http://169.254.169.254/latest/meta-data/ami-id)\\n\\n        echo ${AMI_ID}\\n\\\n        \\n        '\\n    name: AmiId\\n  - action: ExecuteBash\\n    inputs:\\n     \\\n        \\ commands:\\n      - 'set -v\\n\\n        IMDS_TOKEN=$(curl --retry 3 --retry-delay\\\n        \\ 0 -s --fail -X PUT \\\"http://169.254.169.254/latest/api/token\\\"\\n       \\\n        \\ -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 300\\\")\\n\\n        AVAIL_ZONE=$(curl\\\n        \\ --retry 3 --retry-delay 0 -s --fail -H \\\"X-aws-ec2-metadata-token:\\n   \\\n        \\     ${IMDS_TOKEN}\\\" http://169.254.169.254/latest/meta-data/placement/availability-zone)\\n\\\n        \\n        AWS_REGION=${AVAIL_ZONE::-1}\\n\\n        echo ${AWS_REGION}\\n\\n \\\n        \\       '\\n    name: AWSRegion\\n  - action: ExecuteBash\\n    inputs:\\n   \\\n        \\   commands:\\n      - \\\"set -v\\\\nFILE=/etc/os-release\\\\nif [ -e ${FILE} ];\\\n        \\ then\\\\n  . ${FILE}\\\\n  RELEASE=\\\\\\\"\\\\\\n        ${ID}${VERSION_ID:+.${VERSION_ID}}\\\\\\\n        \\\"\\\\nfi\\\\n\\\\nif [ $(echo \\\\\\\"${RELEASE}\\\\\\\" | grep\\\\\\n        \\\\ -w '^amzn\\\\\\\n        \\\\.2') ]; then\\\\n  OS='alinux2'\\\\nelif [ $(echo \\\\\\\"${RELEASE}\\\\\\\" |\\\\\\n \\\n        \\       \\\\ grep '^centos\\\\\\\\.7') ]; then\\\\n  OS='centos7'\\\\nelif [ $(echo\\\n        \\ \\\\\\\"${RELEASE}\\\\\\\"\\\\\\n        \\\\ | grep '^ubuntu\\\\\\\\.18') ]; then\\\\n  OS='ubuntu1804'\\\\\\\n        nelif [ $(echo \\\\\\\"${RELEASE}\\\\\\\"\\\\\\n        \\\\ | grep '^ubuntu\\\\\\\\.20') ];\\\n        \\ then\\\\n  OS='ubuntu2004'\\\\nfi\\\\n\\\\necho ${OS}\\\\n\\\"\\n    name: OperatingSystemName\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -v\\\\\\\n        n\\\\n# Install AWS CLI\\\\nwhich aws\\\\nif [[ $? -ne 0 ]]; then\\\\n  echo \\\\\\\"\\\\\\\n        \\n        Installing unzip\\\\\\\"\\\\n  if [[ \\\\\\\"{{ test.OperatingSystemName.outputs.stdout\\\n        \\ }}\\\\\\\"\\\\\\n        \\\\ =~ ^(centos7|alinux) ]]; then\\\\n    yum -y install\\\n        \\ unzip\\\\n  elif [[ \\\\\\\"{{\\\\\\n        \\\\ test.OperatingSystemName.outputs.stdout\\\n        \\ }}\\\\\\\" =~ ^ubuntu ]]; then\\\\n    apt-get\\\\\\n        \\\\ -y install unzip\\\\\\\n        n  fi\\\\n  echo \\\\\\\"Installing AWS CLI\\\\\\\"\\\\n  curl --retry 3\\\\\\n        \\\\\\\n        \\ -L -o /tmp/awscliv2.zip \\\\\\\"https://awscli.amazonaws.com/awscli-exe-linux-$(uname\\\\\\\n        \\n        \\\\ -m).zip\\\\\\\"\\\\n  cd /tmp/ && unzip awscliv2.zip\\\\n  ./aws/install\\\\\\\n        nfi\\\\n\\\\nDESCRIPTION=\\\\\\\"\\\\\\n        AWS ParallelCluster AMI for {{ test.OperatingSystemName.outputs.stdout\\\n        \\ }}\\\\\\\"\\\\\\n        \\\\nappend_description () {\\\\n  KEY=\\\\\\\"$1\\\\\\\"\\\\n  VALUE=\\\\\\\n        \\\"$2\\\\\\\"\\\\n  if [[ -n \\\\\\\"${VALUE}\\\\\\\"\\\\\\n        \\\\ ]] && [[ ! \\\\\\\"${VALUE}\\\\\\\n        \\\" =~ NOT_INSTALLED ]]; then\\\\n    echo \\\\\\\"Appending\\\\\\n        \\\\ ${KEY}-${VALUE}\\\n        \\ to decription\\\\\\\"\\\\n    DESCRIPTION=\\\\\\\"${DESCRIPTION}, ${KEY}-${VALUE}\\\\\\\n        \\\"\\\\\\n        \\\\n  fi\\\\n}\\\\n\\\\nadd_description () {\\\\n  DESCRIPTION=\\\\\\\"$(echo\\\n        \\ ${DESCRIPTION} |\\\\\\n        \\\\ cut -c -1024)\\\\\\\"\\\\n  echo \\\\\\\"Setting decription\\\n        \\ to ${DESCRIPTION}\\\\\\\"\\\\n  aws\\\\\\n        \\\\ ec2 modify-image-attribute --region\\\n        \\ {{ test.AWSRegion.outputs.stdout }}\\\\\\n        \\\\ --image-id {{ test.AmiId.outputs.stdout\\\n        \\ }} --description \\\\\\\"${DESCRIPTION}\\\\\\\"\\\\\\n        \\\\ || echo \\\\\\\"Not able\\\n        \\ to set AMI description\\\\\\\"\\\\n}\\\\n\\\\nadd_tag () {\\\\n  KEY=\\\\\\\"\\\\\\n      \\\n        \\  $1\\\\\\\"\\\\n  VALUE=\\\\\\\"$2\\\\\\\"\\\\n  if [[ -n \\\\\\\"${VALUE}\\\\\\\" ]] && [[ ! \\\\\\\n        \\\"${VALUE}\\\\\\\" =~ NOT_INSTALLED\\\\\\n        \\\\ ]]; then\\\\n    KEY=\\\\\\\"$(echo\\\n        \\ ${KEY} | cut -c -128)\\\\\\\"\\\\n    VALUE=\\\\\\\"$(echo ${VALUE}\\\\\\n        \\\\\\\n        \\ | cut -c -256)\\\\\\\"\\\\n    echo \\\\\\\"Adding Tag Key=${KEY},Value=${VALUE}\\\\\\\n        \\\"\\\\n  \\\\\\n        \\\\  aws ec2 create-tags --region {{ test.AWSRegion.outputs.stdout\\\n        \\ }} --resource\\\\\\n        \\\\ {{ test.AmiId.outputs.stdout }} --tags \\\\\\\"\\\n        Key=${KEY},Value=${VALUE}\\\\\\\" ||\\\\\\n        \\\\ echo \\\\\\\"Not able to set AMI\\\n        \\ tag\\\\\\\"\\\\n  fi\\\\n}\\\\n\\\\nget_package_version () {\\\\n\\\\\\n        \\\\  set -o\\\n        \\ pipefail\\\\n  PACKAGE_NAME=\\\\\\\"$1\\\\\\\"\\\\n  if [ $(which apt 2> /dev/null)\\\\\\\n        \\n        \\\\ ]; then\\\\n    VERSION=$(dpkg -s \\\\\\\"${PACKAGE_NAME}\\\\\\\" 2> /dev/null\\\n        \\ | grep -i\\\\\\n        \\\\ \\\\\\\"^version:\\\\\\\" | tr -s ' ' | cut -d' ' -f2 ||\\\n        \\ echo \\\\\\\"NOT_INSTALLED\\\\\\\")\\\\n \\\\\\n        \\\\   echo \\\\\\\"${VERSION}\\\\\\\"\\\\\\\n        n  elif [ $(which yum 2> /dev/null) ]; then\\\\n    VERSION=$(rpm\\\\\\n      \\\n        \\  \\\\ -q \\\\\\\"${PACKAGE_NAME}\\\\\\\" 2> /dev/null || echo \\\\\\\"NOT_INSTALLED\\\\\\\"\\\n        )\\\\n    echo\\\\\\n        \\\\ \\\\\\\"${VERSION#${PACKAGE_NAME}-}\\\\\\\"\\\\n  fi\\\\n \\\n        \\ set +o pipefail\\\\n}\\\\n\\\\nget_modinfo\\\\\\n        \\\\ () {\\\\n  set -o pipefail\\\\\\\n        n  MODULE_NAME=\\\\\\\"$1\\\\\\\"\\\\n  VERSION=$(modinfo \\\\\\\"${MODULE_NAME}\\\\\\\"\\\\\\n\\\n        \\        \\\\ 2> /dev/null | grep -i \\\\\\\"^version:\\\\\\\" | tr -s ' ' | cut -d'\\\n        \\ ' -f2 || echo\\\\\\n        \\\\ \\\\\\\"NOT_INSTALLED\\\\\\\")\\\\n  echo \\\\\\\"${VERSION}\\\\\\\n        \\\"\\\\n  set +o pipefail\\\\n}\\\\n\\\\nget_source_version\\\\\\n        \\\\ () {\\\\n \\\n        \\ PACKAGE_NAME=\\\\\\\"$1\\\\\\\"\\\\n  FILENAME=\\\\\\\"$(basename $(ls \\\\\\\"/opt/parallelcluster/sources/${PACKAGE_NAME}\\\\\\\n        \\\"\\\\\\n        * 2> /dev/null || echo \\\\\\\"NOT_INSTALLED\\\\\\\"))\\\\\\\"\\\\n  FILENAME=\\\\\\\n        \\\"${FILENAME%%.tar.gz}\\\\\\\"\\\\\\n        \\\\n  FILENAME=\\\\\\\"${FILENAME%%.zip}\\\\\\\n        \\\"\\\\n  VERSION=\\\\\\\"${FILENAME#${PACKAGE_NAME}-}\\\\\\\"\\\\\\n        \\\\n  echo \\\\\\\n        \\\"${VERSION}\\\\\\\"\\\\n}\\\\n\\\\n# ParallelCluster bootstrap file\\\\nif [[ -f /opt/parallelcluster/.bootstrapped\\\\\\\n        \\n        \\\\ ]]; then\\\\n  add_tag \\\\\\\"parallelcluster:bootstrap_file\\\\\\\" \\\\\\\n        \\\"$(cat /opt/parallelcluster/.bootstrapped)\\\\\\\"\\\\\\n        \\\\nfi\\\\n\\\\n# OS\\\\\\\n        nadd_tag \\\\\\\"parallelcluster:os\\\\\\\" \\\\\\\"{{ test.OperatingSystemName.outputs.stdout\\\\\\\n        \\n        \\\\ }}\\\\\\\"\\\\n\\\\n# Kernel\\\\nKERNEL_VERSION=\\\\\\\"$(uname -r)\\\\\\\"\\\\nadd_tag\\\n        \\ \\\\\\\"parallelcluster:kernel_version\\\\\\\"\\\\\\n        \\\\ \\\\\\\"${KERNEL_VERSION}\\\\\\\n        \\\"\\\\nappend_description \\\\\\\"kernel\\\\\\\" \\\\\\\"${KERNEL_VERSION}\\\\\\\"\\\\\\n     \\\n        \\   \\\\n\\\\n# sudo\\\\nadd_tag \\\\\\\"parallelcluster:sudo_version\\\\\\\" \\\\\\\"$(get_package_version\\\\\\\n        \\n        \\\\ \\\\\\\"sudo\\\\\\\")\\\\\\\"\\\\n\\\\n# Lustre\\\\nLUSTRE_VERSION=\\\\\\\"$(get_package_version\\\n        \\ \\\\\\\"lustre-client\\\\\\\"\\\\\\n        )\\\\\\\"\\\\nadd_tag \\\\\\\"parallelcluster:lustre_version\\\\\\\n        \\\" \\\\\\\"${LUSTRE_VERSION}\\\\\\\"\\\\nappend_description\\\\\\n        \\\\ \\\\\\\"lustre\\\\\\\n        \\\" \\\\\\\"${LUSTRE_VERSION}\\\\\\\"\\\\nLUSTRE_VERSION=\\\\\\\"$(get_package_version\\\\\\n\\\n        \\        \\\\ \\\\\\\"lustre-client-modules-aws\\\\\\\")\\\\\\\"\\\\nadd_tag \\\\\\\"parallelcluster:lustre_version\\\\\\\n        \\\"\\\\\\n        \\\\ \\\\\\\"${LUSTRE_VERSION}\\\\\\\"\\\\nappend_description \\\\\\\"lustre\\\\\\\n        \\\" \\\\\\\"${LUSTRE_VERSION}\\\\\\\"\\\\\\n        \\\\n\\\\n# EFA\\\\nEFA_VERSION=\\\\\\\"$(get_package_version\\\n        \\ \\\\\\\"efa\\\\\\\")\\\\\\\"\\\\nadd_tag \\\\\\\"parallelcluster:efa_version\\\\\\\"\\\\\\n     \\\n        \\   \\\\ \\\\\\\"${EFA_VERSION}\\\\\\\"\\\\nappend_description \\\\\\\"efa\\\\\\\" \\\\\\\"${EFA_VERSION}\\\\\\\n        \\\"\\\\n\\\\n# DCV\\\\n\\\\\\n        DCV_VERSION=\\\\\\\"$(get_package_version \\\\\\\"nice-dcv-server\\\\\\\n        \\\")\\\\\\\"\\\\nadd_tag \\\\\\\"parallelcluster:dcv_version\\\\\\\"\\\\\\n        \\\\ \\\\\\\"${DCV_VERSION}\\\\\\\n        \\\"\\\\nappend_description \\\\\\\"dcv\\\\\\\" \\\\\\\"${DCV_VERSION}\\\\\\\"\\\\n\\\\n# Slurm,\\\\\\\n        \\n        \\\\ Munge and PMIx\\\\nSLURM_VERSION=\\\\\\\"$(get_source_version \\\\\\\"\\\n        slurm\\\\\\\")\\\\\\\"\\\\nadd_tag\\\\\\n        \\\\ \\\\\\\"parallelcluster:slurm_version\\\\\\\n        \\\" \\\\\\\"${SLURM_VERSION}\\\\\\\"\\\\nappend_description\\\\\\n        \\\\ \\\\\\\"slurm\\\\\\\n        \\\" \\\\\\\"${SLURM_VERSION}\\\\\\\"\\\\nadd_tag \\\\\\\"parallelcluster:munge_version\\\\\\\"\\\n        \\\\\\n        \\\\ \\\\\\\"$(get_source_version \\\\\\\"munge\\\\\\\")\\\\\\\"\\\\nadd_tag \\\\\\\"\\\n        parallelcluster:pmix_version\\\\\\\"\\\\\\n        \\\\ \\\\\\\"$(get_source_version \\\\\\\n        \\\"pmix\\\\\\\")\\\\\\\"\\\\n\\\\n# Nvidia, Cuda and Nvidia FabricManager\\\\n\\\\\\n      \\\n        \\  NVIDIA_VERSION=\\\\\\\"$(get_modinfo \\\\\\\"nvidia\\\\\\\")\\\\\\\"\\\\nadd_tag \\\\\\\"parallelcluster:nvidia_version\\\\\\\n        \\\"\\\\\\n        \\\\ \\\\\\\"${NVIDIA_VERSION}\\\\\\\"\\\\nappend_description \\\\\\\"nvidia\\\\\\\n        \\\" \\\\\\\"${NVIDIA_VERSION}\\\\\\\"\\\\\\n        \\\\nCUDA_VERSION=\\\\\\\"$(cat /usr/local/cuda/version.txt\\\n        \\ | cut -d' ' -f3)\\\\\\\"\\\\nadd_tag\\\\\\n        \\\\ \\\\\\\"parallelcluster:cuda_version\\\\\\\n        \\\" \\\\\\\"${CUDA_VERSION}\\\\\\\"\\\\nappend_description\\\\\\n        \\\\ \\\\\\\"cuda\\\\\\\"\\\n        \\ \\\\\\\"${CUDA_VERSION}\\\\\\\"\\\\n\\\\n# Add description\\\\nadd_description\\\\n\\\"\\n\\\n        \\    name: ParallelClusterTag\\nschemaVersion: 1.0\\n\"\n      Description: Tag ParallelCluster AMI\n      Name:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-Tag-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Platform: Linux\n      Tags:\n        Environment: ue2\n        Name: eg-ue2-test-example\n        Namespace: eg\n        ParentAmiId: ami-0bf136df2e5a2e3a5\n        ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n        Stage: test\n        parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n        parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU\n          TensorFlow 2.8.0 Amazon Linux 2 20220404\n      Version: 3.1.2\n    Type: AWS::ImageBuilder::Component\n  ParallelClusterTestComponent:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      Data: \"constants:\\n- CookbookDefaultFile:\\n    type: string\\n    value: /etc/chef/cookbooks/aws-parallelcluster/attributes/default.rb\\n\\\n        description: Test ParallelCluster AMI\\nname: ParallelClusterTest\\nphases:\\n\\\n        - name: test\\n  steps:\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n\\\n        \\      - \\\"set -v\\\\nFILE=/etc/os-release\\\\nif [ -e ${FILE} ]; then\\\\n  . ${FILE}\\\\\\\n        n  echo\\\\\\n        \\\\ \\\\\\\"${ID}${VERSION_ID:+.${VERSION_ID}}\\\\\\\"\\\\nelse\\\\\\\n        n  echo \\\\\\\"The file '${FILE}'\\\\\\n        \\\\ does not exist. Failing build.\\\\\\\n        \\\" && exit 1\\\\nfi\\\\n\\\"\\n    name: OperatingSystemRelease\\n  - action: ExecuteBash\\n\\\n        \\    inputs:\\n      commands:\\n      - \\\"set -v\\\\nRELEASE='{{ test.OperatingSystemRelease.outputs.stdout\\\n        \\ }}'\\\\n\\\\nif\\\\\\n        \\\\ [ `echo \\\\\\\"${RELEASE}\\\\\\\" | grep -w '^amzn\\\\\\\\\\\n        .2'` ]; then\\\\n  OS='alinux2'\\\\n\\\\\\n        elif [ `echo \\\\\\\"${RELEASE}\\\\\\\"\\\n        \\ | grep '^centos\\\\\\\\.7'` ]; then\\\\n  OS='centos7'\\\\n\\\\\\n        elif [ `echo\\\n        \\ \\\\\\\"${RELEASE}\\\\\\\" | grep '^ubuntu\\\\\\\\.18'` ]; then\\\\n  OS='ubuntu1804'\\\\\\\n        n\\\\\\n        elif [ `echo \\\\\\\"${RELEASE}\\\\\\\" | grep '^ubuntu\\\\\\\\.20'` ]; then\\\\\\\n        n  OS='ubuntu2004'\\\\n\\\\\\n        else\\\\n  echo \\\\\\\"Operating System '${RELEASE}'\\\n        \\ is not supported. Failing build.\\\\\\\"\\\\\\n        \\\\ && exit 1\\\\nfi\\\\n\\\\necho\\\n        \\ ${OS}\\\\n\\\"\\n    name: OperatingSystemName\\n  - action: ExecuteBash\\n   \\\n        \\ inputs:\\n      commands:\\n      - 'set -v\\n\\n        PATTERN=$(grep -F \\\"\\\n        default[''cluster''][''python-version'']\\\" {{ CookbookDefaultFile\\n      \\\n        \\  }})\\n\\n        VERSION=$(echo ${PATTERN} | tr -d ''\\\\n'' | cut -d = -f\\\n        \\ 2 | xargs)\\n\\n        echo ${VERSION}\\n\\n        '\\n    name: PythonVersion\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - 'set -v\\n\\n\\\n        \\        PATTERN=$(grep -F \\\"default[''cluster''][''scheduler_plugin''][''python_version'']\\\"\\\n        \\n        {{ CookbookDefaultFile }})\\n\\n        VERSION=$(echo ${PATTERN}\\\n        \\ | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        echo ${VERSION}\\n\\n\\\n        \\        '\\n    name: SchedulerPluginPythonVersion\\n  - action: ExecuteBash\\n\\\n        \\    inputs:\\n      commands:\\n      - 'set -v\\n\\n        PATTERN=$(grep -F\\\n        \\ \\\"default[''cluster''][''base_dir'']\\\" {{ CookbookDefaultFile\\n        }})\\n\\\n        \\n        BASE_DIR=$(echo ${PATTERN} | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\\n        \\n        PYENV_ROOT+=\\\"${BASE_DIR}/pyenv\\\"\\n\\n        echo ${PYENV_ROOT}\\n\\\n        \\n        '\\n    name: SystemPyenvRoot\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - 'set -v\\n\\n        PATTERN=$(grep -F \\\"default[''cluster''][''scheduler_plugin''][''home'']\\\"\\\n        \\ {{\\n        CookbookDefaultFile }})\\n\\n        BASE_DIR=$(echo ${PATTERN}\\\n        \\ | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        PYENV_ROOT+=\\\"${BASE_DIR}/.pyenv\\\"\\\n        \\n\\n        echo ${PYENV_ROOT}\\n\\n        '\\n    name: SchedulerPluginPyenvRoot\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - 'set -v\\n\\n\\\n        \\        echo \\\"{{ test.SystemPyenvRoot.outputs.stdout }}/versions/{{ test.PythonVersion.outputs.stdout\\n\\\n        \\        }}/envs/cookbook_virtualenv\\\"\\n\\n        '\\n    name: CookbookVirtualenvPath\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - 'set -v\\n\\n\\\n        \\        echo \\\"{{ test.SystemPyenvRoot.outputs.stdout }}/versions/{{ test.PythonVersion.outputs.stdout\\n\\\n        \\        }}/envs/node_virtualenv\\\"\\n\\n        '\\n    name: NodeVirtualenvPath\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - 'set -v\\n\\n\\\n        \\        echo \\\"{{ test.SchedulerPluginPyenvRoot.outputs.stdout }}/versions/{{\\\n        \\ test.SchedulerPluginPythonVersion.outputs.stdout\\n        }}/envs/scheduler_plugin_virtualenv\\\"\\\n        \\n\\n        '\\n    name: SchedulerPluginVirtualenvPath\\n  - action: ExecuteBash\\n\\\n        \\    inputs:\\n      commands:\\n      - 'set -v\\n\\n        NVSWITCHES=$(lspci\\\n        \\ -d 10de:1af1 | wc -l)\\n\\n        echo \\\"${NVSWITCHES}\\\"\\n\\n        '\\n \\\n        \\   name: NvSwitches\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n\\\n        \\      - 'set -v\\n\\n        PATTERN=$(grep -F \\\"default[''cluster''][''reserved_base_uid'']\\\"\\\n        \\ {{ CookbookDefaultFile\\n        }})\\n\\n        RESERVED_BASE_UID=$(echo\\\n        \\ ${PATTERN} | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        echo \\\"${RESERVED_BASE_UID}\\\"\\\n        \\n\\n        '\\n    name: BaseUID\\n  - action: ExecuteBash\\n    inputs:\\n \\\n        \\     commands:\\n      - \\\"set -vx\\\\nOS=\\\\\\\"{{ test.OperatingSystemName.outputs.stdout\\\n        \\ }}\\\\\\\"\\\\nif [[ ${OS}\\\\\\n        \\\\ =~ ^alinux ]]; then\\\\n  username=\\\\\\\"\\\n        ec2-user\\\\\\\"\\\\nelif [[ ${OS} =~ ^centos ]];\\\\\\n        \\\\ then\\\\n  username=\\\\\\\n        \\\"centos\\\\\\\"\\\\nelif [[ ${OS} =~ ^ubuntu ]]; then\\\\n  username=\\\\\\\"\\\\\\n   \\\n        \\     ubuntu\\\\\\\"\\\\nfi\\\\nexport PATH=\\\\\\\"/usr/local/bin:/usr/bin/:${PATH}\\\\\\\n        \\\"\\\\n\\\\necho \\\\\\\"\\\\\\n        Executing awscli as user...\\\\\\\"\\\\nsu - ${username}\\\n        \\ -c \\\\\\\"aws --version\\\\\\\"\\\\n\\\\necho\\\\\\n        \\\\ \\\\\\\"Executing awscli as\\\n        \\ root...\\\\\\\"\\\\naws --version\\\\n[[ $? -ne 0 ]] && echo \\\\\\\"\\\\\\n        fail\\\n        \\ to execute awscli as root\\\\\\\" && exit 1\\\\n\\\\necho \\\\\\\"Executing awscli as\\\n        \\ root\\\\\\n        \\\\ in cookbook virtualenv..\\\\\\\"\\\\n{{ test.CookbookVirtualenvPath.outputs.stdout\\\\\\\n        \\n        \\\\ }}/bin/aws --version\\\\n[[ $? -ne 0 ]] && echo \\\\\\\"fail to execute\\\n        \\ awscli as\\\\\\n        \\\\ root in cookbook virtualenv\\\\\\\" && exit 1\\\\necho\\\n        \\ \\\\\\\"AWSCli test passed\\\\\\\"\\\\n\\\"\\n    name: AWSCli\\n  - action: ExecuteBash\\n\\\n        \\    inputs:\\n      commands:\\n      - 'set -vx\\n\\n\\n        echo \\\"Checking\\\n        \\ virtualenv python version...\\\"\\n\\n        {{ test.CookbookVirtualenvPath.outputs.stdout\\\n        \\ }}/bin/python -V | grep {{ test.PythonVersion.outputs.stdout\\n        }}\\n\\\n        \\n        [[ $? -ne 0 ]] && echo \\\"Check cookbook virtualenv python version\\\n        \\ failed\\\" &&\\n        exit 1\\n\\n\\n        {{ test.NodeVirtualenvPath.outputs.stdout\\\n        \\ }}/bin/python -V | grep {{ test.PythonVersion.outputs.stdout\\n        }}\\n\\\n        \\n        [[ $? -ne 0 ]] && echo \\\"Check node virtualenv python version failed\\\"\\\n        \\ && exit\\n        1\\n\\n\\n        {{ test.SchedulerPluginVirtualenvPath.outputs.stdout\\\n        \\ }}/bin/python -V | grep\\n        {{ test.SchedulerPluginPythonVersion.outputs.stdout\\\n        \\ }}\\n\\n        [[ $? -ne 0 ]] && echo \\\"Check scheduler plugin virtualenv\\\n        \\ python version failed\\\"\\n        && exit 1\\n\\n        su -l pcluster-scheduler-plugin\\\n        \\ -c \\\"which python\\\" | grep envs/scheduler_plugin_virtualenv/bin/python\\n\\\n        \\n        [[ $? -ne 0 ]] && echo \\\"Check scheduler plugin virtualenv python\\\n        \\ path failed\\\"\\n        && exit 1\\n\\n\\n        echo \\\"Virtualenv test passed\\\"\\\n        \\n\\n        '\\n    name: Virtualenv\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - \\\"set -vx\\\\nCOOKBOOK_PIP_VERSION=$({{ test.CookbookVirtualenvPath.outputs.stdout\\\\\\\n        \\n        \\\\ }}/bin/pip show pip 2> /dev/null | grep -i \\\\\\\"^Version:\\\\\\\"\\\n        \\ | tr -s ' ' | cut\\\\\\n        \\\\ -d' ' -f2) || echo \\\\\\\"NOT_INSTALLED\\\\\\\"\\\n        \\\\nNODE_PIP_VERSION=$({{ test.NodeVirtualenvPath.outputs.stdout\\\\\\n      \\\n        \\  \\\\ }}/bin/pip show pip 2> /dev/null | grep -i \\\\\\\"^Version:\\\\\\\" | tr -s\\\n        \\ ' ' | cut\\\\\\n        \\\\ -d' ' -f2) || echo \\\\\\\"NOT_INSTALLED\\\\\\\"\\\\nSCHEDULER_PLUGIN_PIP_VERSION=$({{\\\\\\\n        \\n        \\\\ test.SchedulerPluginVirtualenvPath.outputs.stdout }}/bin/pip\\\n        \\ show pip 2>\\\\\\n        \\\\ /dev/null | grep -i \\\\\\\"^Version:\\\\\\\" | tr -s\\\n        \\ ' ' | cut -d' ' -f2) || echo \\\\\\\"\\\\\\n        NOT_INSTALLED\\\\\\\"\\\\n\\\\nolder_than_required_version(){\\\\\\\n        n  CURRENT_VERSION=\\\\\\\"$1\\\\\\\"\\\\\\n        \\\\n  REQUIRED_VERSION=\\\\\\\"19.3\\\\\\\"\\\n        \\\\n  if (( ${CURRENT_VERSION%%.*} < ${REQUIRED_VERSION%%.*}\\\\\\n        \\\\\\\n        \\ || ( ${CURRENT_VERSION%%.*} == ${REQUIRED_VERSION%%.*} && ${CURRENT_VERSION##*.}\\\\\\\n        \\n        \\\\ < ${REQUIRED_VERSION##*.} ) )) ; then\\\\n      echo \\\\\\\"true\\\\\\\n        \\\"\\\\n  else\\\\n   \\\\\\n        \\\\   echo \\\\\\\"false\\\\\\\"\\\\n  fi\\\\n}\\\\n# pip versions\\\n        \\ >= 19.3 is required to enable\\\\\\n        \\\\ installation of python wheel\\\n        \\ binaries on Graviton\\\\n[[ $(older_than_required_version\\\\\\n        \\\\ \\\\\\\n        \\\"${COOKBOOK_PIP_VERSION}\\\\\\\") == true ]] && echo \\\\\\\"pip version in cookbook\\\\\\\n        \\n        \\\\ virtualenv must be greater than 19.3\\\\\\\" && exit 1\\\\n[[ $(older_than_required_version\\\\\\\n        \\n        \\\\ \\\\\\\"${NODE_PIP_VERSION}\\\\\\\") == true ]] && echo \\\\\\\"pip version\\\n        \\ in node virtualenv\\\\\\n        \\\\ must be greater than 19.3\\\\\\\" && exit 1\\\\\\\n        n[[ $(older_than_required_version\\\\\\n        \\\\ \\\\\\\"${SCHEDULER_PLUGIN_PIP_VERSION}\\\\\\\n        \\\") == true ]] && echo \\\\\\\"pip version in\\\\\\n        \\\\ scheduler plugin virtualenv\\\n        \\ must be greater than 19.3\\\\\\\" && exit 1\\\\necho\\\\\\n        \\\\ \\\\\\\"Pip test\\\n        \\ passed\\\\\\\"\\\\n\\\"\\n    name: Pip\\n  - action: ExecuteBash\\n    inputs:\\n \\\n        \\     commands:\\n      - \\\"set -vx\\\\nif [ {{ test.NvSwitches.outputs.stdout\\\n        \\ }} -gt 1 ]; then\\\\n  echo\\\\\\n        \\\\ \\\\\\\"test fabric-manager daemon\\\\\\\n        \\\"\\\\n  systemctl show -p SubState nvidia-fabricmanager\\\\\\n        \\\\ | grep\\\n        \\ -i running\\\\n  [[ $? -ne 0 ]] && echo \\\\\\\"fabric-manager daemon test\\\\\\n\\\n        \\        \\\\ failed\\\\\\\" && exit 1\\\\n  echo \\\\\\\"NVIDIA Fabric Manager service\\\n        \\ correctly started\\\\\\\"\\\\\\n        \\\\nfi\\\\n\\\"\\n    name: FabricManager\\n \\\n        \\ - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - 'set -vx\\n\\n\\\n        \\        /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl\\\n        \\ -a status\\n        | grep status | grep stopped\\n\\n        [[ $? -ne 0 ]]\\\n        \\ && echo \\\"amazon-cloudwatch-agent is not stopped\\\" && exit 1\\n\\n       \\\n        \\ echo \\\"CloudWatch test passed\\\"\\n\\n        '\\n    name: CloudWatch\\n  -\\\n        \\ action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -vx\\\\nSYSTEM_USER_ID_START=$((\\\n        \\ {{ test.BaseUID.outputs.stdout }} + 10\\\\\\n        \\\\ ))\\\\nfor i in $(seq\\\n        \\ 0 9);\\\\ndo\\\\n    USER_ID=$(($i + $SYSTEM_USER_ID_START))\\\\n\\\\\\n        \\\\\\\n        \\    getent passwd ${USER_ID}\\\\n    [[ $? -eq 0 ]] && echo \\\\\\\"uid ${USER_ID}\\\\\\\n        \\n        \\\\ exists, it should be reserved for ParallelCluster system users.\\\n        \\ Reserved\\\\\\n        \\\\ uid range is ${SYSTEM_USER_ID_START} - $(($SYSTEM_USER_ID_START\\\n        \\ + 9))\\\\\\\"\\\\\\n        \\\\ && exit 1\\\\ndone\\\\necho \\\\\\\"SchedulerPlugin User\\\n        \\ test passed\\\\\\\"\\\\n\\\"\\n    name: SchedulerPluginUser\\n  - action: ExecuteBash\\n\\\n        \\    inputs:\\n      commands:\\n      - \\\"set -vx\\\\nSYSTEM_GROUP_ID_START=$((\\\n        \\ {{ test.BaseUID.outputs.stdout }} + 10\\\\\\n        \\\\ ))\\\\nfor i in $(seq\\\n        \\ 0 9);\\\\ndo\\\\n    GROUP_ID=$(($i + $SYSTEM_GROUP_ID_START))\\\\n\\\\\\n      \\\n        \\  \\\\    getent group ${GROUP_ID}\\\\n    [[ $? -eq 0 ]] && echo \\\\\\\"gid ${GROUP_ID}\\\\\\\n        \\n        \\\\ exists, it should be reserved for ParallelCluster system group.\\\n        \\ Reserved\\\\\\n        \\\\ gid range is ${SYSTEM_GROUP_ID_START} - $(($SYSTEM_GROUP_ID_START\\\n        \\ + 9))\\\\\\\"\\\\\\n        \\\\ && exit 1\\\\ndone\\\\necho \\\\\\\"SchedulerPlugin Group\\\n        \\ test passed\\\\\\\"\\\\n\\\"\\n    name: SchedulerPluginGroup\\n  - action: ExecuteBash\\n\\\n        \\    inputs:\\n      commands:\\n      - \\\"set -vx\\\\nOS=\\\\\\\"{{ test.OperatingSystemName.outputs.stdout\\\n        \\ }}\\\\\\\"\\\\nif [[ ${OS}\\\\\\n        \\\\ =~ ^alinux ]]; then\\\\n  echo \\\\\\\"verify\\\n        \\ log4j-cve-2021-44228-hotpatch service\\\\\\n        \\\\ is disabled\\\\\\\"\\\\n \\\n        \\ systemctl show -p SubState log4j-cve-2021-44228-hotpatch\\\\\\n        \\\\ |\\\n        \\ grep -i -v running\\\\n  [[ $? -ne 0 ]] && echo \\\\\\\"log4j-cve-2021-44228-hotpatch\\\\\\\n        \\n        \\\\ service is running\\\\\\\" && exit 1\\\\n  systemctl show -p LoadState\\\n        \\ log4j-cve-2021-44228-hotpatch\\\\\\n        \\\\ | grep -i \\\\\\\"LoadState=masked\\\\\\\n        \\\"\\\\n  [[ $? -ne 0 ]] && echo \\\\\\\"log4j-cve-2021-44228-hotpatch\\\\\\n      \\\n        \\  \\\\ service is not masked\\\\\\\" && exit 1\\\\nfi\\\\necho \\\\\\\"Log4jPatcher Group\\\n        \\ test passed\\\\\\\"\\\\\\n        \\\\n\\\"\\n    name: Log4jPatcher\\nschemaVersion:\\\n        \\ 1.0\\n\"\n      Description: Test ParallelCluster AMI\n      Name:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-Test-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Platform: Linux\n      Tags:\n        Environment: ue2\n        Name: eg-ue2-test-example\n        Namespace: eg\n        ParentAmiId: ami-0bf136df2e5a2e3a5\n        ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n        Stage: test\n        parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n        parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU\n          TensorFlow 2.8.0 Amazon Linux 2 20220404\n      Version: 3.1.2\n    Type: AWS::ImageBuilder::Component\n  ParallelClusterValidateComponent:\n    DependsOn:\n    - DeleteStackFunctionExecutionRole\n    Properties:\n      Data: \"constants:\\n- CookbookDefaultFile:\\n    type: string\\n    value: /etc/chef/cookbooks/aws-parallelcluster/attributes/default.rb\\n\\\n        description: Validate ParallelCluster AMI\\nname: ParallelClusterValidate\\n\\\n        phases:\\n- name: validate\\n  steps:\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - \\\"set -v\\\\nFILE=/etc/os-release\\\\nif [ -e ${FILE}\\\n        \\ ]; then\\\\n  . ${FILE}\\\\n  echo\\\\\\n        \\\\ \\\\\\\"${ID}${VERSION_ID:+.${VERSION_ID}}\\\\\\\n        \\\"\\\\nelse\\\\n  echo \\\\\\\"The file '${FILE}'\\\\\\n        \\\\ does not exist. Failing\\\n        \\ build.\\\\\\\" && exit 1\\\\nfi\\\\n\\\"\\n    name: OperatingSystemRelease\\n  - action:\\\n        \\ ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -v\\\\nRELEASE='{{\\\n        \\ validate.OperatingSystemRelease.outputs.stdout }}'\\\\n\\\\n\\\\\\n        if [\\\n        \\ `echo \\\\\\\"${RELEASE}\\\\\\\" | grep -w '^amzn\\\\\\\\.2'` ]; then\\\\n  OS='alinux2'\\\\\\\n        n\\\\\\n        elif [ `echo \\\\\\\"${RELEASE}\\\\\\\" | grep '^centos\\\\\\\\.7'` ]; then\\\\\\\n        n  OS='centos7'\\\\n\\\\\\n        elif [ `echo \\\\\\\"${RELEASE}\\\\\\\" | grep '^ubuntu\\\\\\\n        \\\\.18'` ]; then\\\\n  OS='ubuntu1804'\\\\n\\\\\\n        elif [ `echo \\\\\\\"${RELEASE}\\\\\\\n        \\\" | grep '^ubuntu\\\\\\\\.20'` ]; then\\\\n  OS='ubuntu2004'\\\\n\\\\\\n        else\\\\\\\n        n  echo \\\\\\\"Operating System '${RELEASE}' is not supported. Failing build.\\\\\\\n        \\\"\\\\\\n        \\\\ && exit 1\\\\nfi\\\\n\\\\necho ${OS}\\\\n\\\"\\n    name: OperatingSystemName\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -v\\\\\\\n        nARCH=$(uname -m)\\\\ncase ${ARCH} in\\\\n  'x86_64')\\\\n    echo 'x86_64'\\\\n\\\\\\\n        \\n        \\\\    ;;\\\\n  'aarch64')\\\\n    echo 'arm64'\\\\n    ;;\\\\n  *)\\\\n  \\\n        \\  echo \\\\\\\"The '${ARCH}'\\\\\\n        \\\\ architecture is not supported. Failing\\\n        \\ build.\\\\\\\" && exit 1\\\\n    ;;\\\\nesac\\\\n\\\"\\n    name: OperatingSystemArchitecture\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -v\\\\\\\n        nOS='{{ validate.OperatingSystemName.outputs.stdout }}'\\\\n\\\\nif [ `echo\\\\\\n\\\n        \\        \\\\ \\\\\\\"${OS}\\\\\\\" | grep -E '^(alinux|centos)'` ]; then\\\\n  PLATFORM='RHEL'\\\\\\\n        nelif\\\\\\n        \\\\ [ `echo \\\\\\\"${OS}\\\\\\\" | grep -E '^ubuntu'` ]; then\\\\n\\\n        \\  PLATFORM='DEBIAN'\\\\nfi\\\\n\\\\\\n        \\\\necho ${PLATFORM}\\\\n\\\"\\n    name:\\\n        \\ PlatformName\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n  \\\n        \\    - 'set -v\\n\\n        IMDS_TOKEN=$(curl --retry 3 --retry-delay 0 -s --fail\\\n        \\ -X PUT \\\"http://169.254.169.254/latest/api/token\\\"\\n        -H \\\"X-aws-ec2-metadata-token-ttl-seconds:\\\n        \\ 300\\\")\\n\\n        AVAIL_ZONE=$(curl --retry 3 --retry-delay 0 -s --fail\\\n        \\ -H \\\"X-aws-ec2-metadata-token:\\n        ${IMDS_TOKEN}\\\" http://169.254.169.254/latest/meta-data/placement/availability-zone)\\n\\\n        \\n        AWS_REGION=${AVAIL_ZONE::-1}\\n\\n        echo ${AWS_REGION}\\n\\n \\\n        \\       '\\n    name: AWSRegion\\n  - action: ExecuteBash\\n    inputs:\\n   \\\n        \\   commands:\\n      - 'set -v\\n\\n        [[ {{ validate.OperatingSystemArchitecture.outputs.stdout\\\n        \\ }} != ''arm64''\\n        ]] && echo \\\"true\\\" || echo \\\"false\\\"\\n\\n     \\\n        \\   '\\n    name: IntelMPISupported\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - 'set -v\\n\\n        [[ {{ validate.OperatingSystemArchitecture.outputs.stdout\\\n        \\ }} == ''arm64''\\n        ]] && echo \\\"true\\\" || echo \\\"false\\\"\\n\\n     \\\n        \\   '\\n    name: ArmPLSupported\\n  - action: ExecuteBash\\n    inputs:\\n  \\\n        \\    commands:\\n      - 'set -v\\n\\n        [[ {{ validate.OperatingSystemArchitecture.outputs.stdout\\\n        \\ }} == ''arm64''\\n        ]] && echo \\\"false\\\" || echo \\\"true\\\"\\n\\n     \\\n        \\   '\\n    name: FabricManagerSupported\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - \\\"set -v\\\\nARCHITECTURE='{{ validate.OperatingSystemArchitecture.outputs.stdout\\\\\\\n        \\n        \\\\ }}'\\\\nOS='{{ validate.OperatingSystemName.outputs.stdout }}'\\\\\\\n        nif [ ${ARCHITECTURE}\\\\\\n        \\\\ == 'arm64' ] && [[ ${OS} =~ ^(ubuntu(18|20)04|alinux2)$\\\n        \\ ]] || [ ${ARCHITECTURE}\\\\\\n        \\\\ == 'x86_64' ]; then\\\\n  echo \\\\\\\"\\\n        true\\\\\\\"\\\\nelse\\\\n  echo \\\\\\\"false\\\\\\\"\\\\nfi\\\\n\\\"\\n    name: LustreSupported\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - 'set -v\\n\\n\\\n        \\        PATTERN=$(grep -F \\\"default[''cluster''][''munge''][''munge_version'']\\\"\\\n        \\ {{\\n        CookbookDefaultFile }})\\n\\n        VERSION=$(echo ${PATTERN}\\\n        \\ | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        echo ${VERSION}\\n\\n\\\n        \\        '\\n    name: MungeVersion\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - 'set -v\\n\\n        PATTERN=$(grep -F \\\"default[''cluster''][''nvidia''][''driver_version'']\\\"\\\n        \\ {{\\n        CookbookDefaultFile }})\\n\\n        VERSION=$(echo ${PATTERN}\\\n        \\ | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        echo ${VERSION}\\n\\n\\\n        \\        '\\n    name: NvidiaDriverVersion\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - 'set -v\\n\\n        PATTERN=$(grep -F \\\"default[''cluster''][''nvidia''][''cuda_version'']\\\"\\\n        \\ {{\\n        CookbookDefaultFile }})\\n\\n        VERSION=$(echo ${PATTERN}\\\n        \\ | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        echo ${VERSION}\\n\\n\\\n        \\        '\\n    name: CudaVersion\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - 'set -v\\n\\n        PATTERN=$(grep -F \\\"default[''cluster''][''armpl''][''major_minor_version'']\\\"\\\n        \\n        {{ CookbookDefaultFile }})\\n\\n        MAJOR_MINOR_VERSION=$(echo\\\n        \\ ${PATTERN} | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        VERSION+=\\\"\\\n        ${MAJOR_MINOR_VERSION}.\\\"\\n\\n        PATTERN=$(grep -F \\\"default[''cluster''][''armpl''][''patch_version'']\\\n        \\ = ''0''\\\"\\n        {{ CookbookDefaultFile }})\\n\\n        PATCH_VERSION=$(echo\\\n        \\ ${PATTERN} | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        VERSION+=\\\"\\\n        ${PATCH_VERSION}\\\"\\n\\n        echo ${VERSION}\\n\\n        '\\n    name: ArmPLVersion\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - 'set -v\\n\\n\\\n        \\        PATTERN=$(grep -F \\\"default[''cluster''][''armpl''][''gcc''][''major_minor_version'']\\\"\\\n        \\n        {{ CookbookDefaultFile }})\\n\\n        VERSION=$(echo ${PATTERN}\\\n        \\ | tr -d ''\\\\n'' | cut -d = -f 2 | xargs)\\n\\n        echo ${VERSION}\\n\\n\\\n        \\        '\\n    name: ArmPLGCCVersion\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - 'set -v\\n\\n        NVIDIA_ENABLED=$(cat /etc/parallelcluster/image_dna.json\\\n        \\ | jq -r ''.cluster.nvidia.enabled'')\\n\\n        echo \\\"${NVIDIA_ENABLED}\\\"\\\n        \\n\\n        '\\n    name: NvidiaEnabled\\n  - action: ExecuteBash\\n    inputs:\\n\\\n        \\      commands:\\n      - 'set -v\\n\\n        HAS_GPU=$(lspci | grep -o \\\"\\\n        NVIDIA\\\") || HAS_GPU=\\\"false\\\"\\n\\n        echo \\\"${HAS_GPU}\\\"\\n\\n        '\\n\\\n        \\    name: HasGPU\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n\\\n        \\      - 'set -vx\\n\\n        echo \\\"check munge installed\\\"\\n\\n        munge\\\n        \\ --version | grep {{ validate.MungeVersion.outputs.stdout }}\\n\\n        [[\\\n        \\ $? -ne 0 ]] && echo \\\"Check munge version failed\\\" && exit 1\\n\\n       \\\n        \\ echo \\\"Munge test passed\\\"\\n\\n        '\\n    name: Munge\\n  - action: ExecuteBash\\n\\\n        \\    inputs:\\n      commands:\\n      - \\\"set -vx\\\\nPLATFORM='{{ validate.PlatformName.outputs.stdout\\\n        \\ }}'\\\\n\\\\nif [ {{\\\\\\n        \\\\ validate.IntelMPISupported.outputs.stdout\\\n        \\ }} == true ]; then\\\\n  echo \\\\\\\"\\\\\\n        Checking efa packages installed...\\\\\\\n        \\\"\\\\n  if [ ${PLATFORM} == RHEL ]; then\\\\n\\\\\\n        \\\\    rpm -qa | grep\\\n        \\ libfabric && rpm -qa | grep efa-\\\\n    [[ $? -ne 0 ]] &&\\\\\\n        \\\\ echo\\\n        \\ \\\\\\\"Check efa rpm failed\\\\\\\" && exit 1\\\\n\\\\n    echo \\\\\\\"Checking Intel\\\n        \\ MPI\\\\\\n        \\\\ 20xx installed and module available...\\\\\\\"\\\\n    unset\\\n        \\ MODULEPATH\\\\n    source\\\\\\n        \\\\ /etc/profile.d/modules.sh\\\\n    (module\\\n        \\ avail intelmpi)2>&1 | grep \\\\\\\"/opt/intel/mpi/20.*/modulefiles/\\\\\\\"\\\\\\n\\\n        \\        \\\\n    [[ $? -ne 0 ]] && echo \\\\\\\"Check Intel MPI failed\\\\\\\" && exit\\\n        \\ 1\\\\n  else\\\\n\\\\\\n        \\\\    dpkg -l | grep libfabric && modinfo efa |\\\n        \\ grep efa && [ -d /opt/amazon/efa\\\\\\n        \\\\ ]\\\\n    [[ $? -ne 0 ]] &&\\\n        \\ echo \\\\\\\"Check efa deb failed\\\\\\\" && exit 1\\\\n  fi\\\\n\\\\\\n        fi\\\\necho\\\n        \\ \\\\\\\"EFA test passed\\\\\\\"\\\\n\\\"\\n    name: EFAIntelMPI\\n  - action: ExecuteBash\\n\\\n        \\    inputs:\\n      commands:\\n      - \\\"set -vx\\\\nPLATFORM='{{ validate.PlatformName.outputs.stdout\\\n        \\ }}'\\\\n\\\\nif [ {{\\\\\\n        \\\\ validate.NvidiaEnabled.outputs.stdout }}\\\n        \\ == \\\\\\\"no\\\\\\\" ]; then\\\\n  echo \\\\\\\"Nvidia\\\\\\n        \\\\ recipe not enabled,\\\n        \\ skipping.\\\\\\\" && exit 0\\\\nfi\\\\nif [ {{ validate.HasGPU.outputs.stdout\\\\\\n\\\n        \\        \\\\ }} == \\\\\\\"false\\\\\\\" ]; then\\\\n  echo \\\\\\\"No GPU detected, skipping.\\\\\\\n        \\\" && exit 0\\\\n\\\\\\n        fi\\\\n\\\\ndriver_ver=\\\\\\\"{{ validate.NvidiaDriverVersion.outputs.stdout\\\n        \\ }}\\\\\\\"\\\\nexport\\\\\\n        \\\\ PATH=\\\\\\\"/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\\\\\\\n        \\\"\\\\\\n        \\\\n\\\\necho \\\\\\\"Testing Nvidia driver version\\\\\\\"\\\\ndriver_output=$(nvidia-smi\\\n        \\ | grep\\\\\\n        \\\\ -E -o \\\\\\\"Driver Version: [0-9.]+\\\\\\\")\\\\n[[ \\\\\\\"${driver_output}\\\\\\\n        \\\" != \\\\\\\"Driver\\\\\\n        \\\\ Version: ${driver_ver}\\\\\\\" ]] && \\\\\\\"ERROR\\\n        \\ Installed version ${driver_output}\\\\\\n        \\\\ but expected ${driver_ver}\\\\\\\n        \\\" && exit 1\\\\necho \\\\\\\"Correctly installed Nvidia\\\\\\n        \\\\ ${driver_output}\\\\\\\n        \\\"\\\\n\\\\nif [ {{ validate.FabricManagerSupported.outputs.stdout\\\\\\n       \\\n        \\ \\\\ }} == \\\\\\\"true\\\\\\\" ]; then\\\\n  echo \\\\\\\"Testing Nvidia Fabric Manager\\\n        \\ version\\\\\\\"\\\\\\n        \\\\n  nvidia_driver_version=$(modinfo -F version nvidia)\\\\\\\n        n  if [ \\\\\\\"${PLATFORM}\\\\\\\"\\\\\\n        \\\\ == \\\\\\\"RHEL\\\\\\\" ]; then\\\\n    yum\\\n        \\ list installed | grep \\\\\\\"nvidia-fabric.*manager\\\\\\\"\\\\\\n        \\\\ | grep\\\n        \\ \\\\\\\"${nvidia_driver_version}\\\\\\\" || exit 1\\\\n    yum versionlock list\\\\\\n\\\n        \\        \\\\ | grep \\\\\\\"nvidia-fabric.*manager\\\\\\\" || exit 1\\\\n  else\\\\n  \\\n        \\  apt list --installed\\\\\\n        \\\\ | grep \\\\\\\"nvidia-fabric.*manager\\\\\\\"\\\n        \\ | grep \\\\\\\"${nvidia_driver_version}\\\\\\\" ||\\\\\\n        \\\\ exit 1\\\\n    apt-mark\\\n        \\ showhold | grep \\\\\\\"nvidia-fabric.*manager\\\\\\\" || exit\\\\\\n        \\\\ 1\\\\\\\n        n  fi\\\\n  echo \\\\\\\"Fabric Manager match Nvidia driver and version is locked\\\\\\\n        \\\"\\\\\\n        \\\\              \\\\nfi\\\\n\\\\necho \\\\\\\"Testing CUDA installation\\\n        \\ with nvcc\\\\\\\"\\\\ncuda_ver=\\\\\\\"\\\\\\n        {{ validate.CudaVersion.outputs.stdout\\\n        \\ }}\\\\\\\"\\\\nexport PATH=/usr/local/cuda-${cuda_ver}/bin:${PATH}\\\\n\\\\\\n    \\\n        \\    export LD_LIBRARY_PATH=/usr/local/cuda-${cuda_ver}/lib64:${LD_LIBRARY_PATH}\\\\\\\n        n\\\\\\n        cuda_output=$(nvcc -V | grep -E -o \\\\\\\"release [0-9]+.[0-9]+\\\\\\\n        \\\")\\\\n[[ \\\\\\\"${cuda_output}\\\\\\\"\\\\\\n        \\\\ != \\\\\\\"release ${cuda_ver}\\\\\\\n        \\\" ]] && echo \\\\\\\"ERROR Installed version ${cuda_output}\\\\\\n        \\\\ but\\\n        \\ expected ${cuda_ver}\\\\\\\" && exit 1\\\\necho \\\\\\\"Correctly installed CUDA ${cuda_output}\\\\\\\n        \\\"\\\\\\n        \\\\n\\\\necho \\\\\\\"Testing CUDA with deviceQuery...\\\\\\\"\\\\nif [ {{\\\n        \\ validate.OperatingSystemArchitecture.outputs.stdout\\\\\\n        \\\\ }} !=\\\n        \\ 'arm64' ]; then\\\\n  /usr/local/cuda-${cuda_ver}/extras/demo_suite/deviceQuery\\\\\\\n        \\n        \\\\ | grep -o \\\\\\\"Result = PASS\\\\\\\"\\\\n  [[ $? -ne 0 ]] && echo \\\\\\\n        \\\"CUDA deviceQuery\\\\\\n        \\\\ test failed\\\\\\\" && exit 1              \\\\\\\n        nelse\\\\n   cd /usr/local/cuda-${cuda_ver}/samples/1_Utilities/deviceQuery\\\\\\\n        n\\\\\\n        \\\\   make\\\\n   /usr/local/cuda-${cuda_ver}/samples/bin/sbsa/linux/release/deviceQuery\\\\\\\n        \\n        \\\\ | grep -o \\\\\\\"Result = PASS\\\\\\\"\\\\n   [[ $? -ne 0 ]] && echo \\\\\\\n        \\\"CUDA deviceQuery\\\\\\n        \\\\ test failed\\\\\\\" && exit 1\\\\nfi\\\\necho \\\\\\\"\\\n        CUDA deviceQuery test passed\\\\\\\"\\\\n\\\"\\n    name: NvidiaCudaFabricManager\\n\\\n        \\  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"set -vx\\\\\\\n        nOS='{{ validate.OperatingSystemName.outputs.stdout }}'\\\\n\\\\nif [ {{\\\\\\n \\\n        \\       \\\\ validate.LustreSupported.outputs.stdout }} == true ]; then\\\\n \\\n        \\ echo \\\\\\\"Checking\\\\\\n        \\\\ for Lustre client...\\\\\\\"\\\\n  if [ ${OS}\\\n        \\ == centos7 ]; then\\\\n    rpm -qa | grep\\\\\\n        \\\\ lustre-client\\\\n \\\n        \\ elif [ ${OS} == ubuntu1804 ]; then\\\\n    dpkg -l | grep\\\\\\n        \\\\ lustre\\\\\\\n        n  fi\\\\nfi\\\\n[[ $? -ne 0 ]] && echo \\\\\\\"Check for Lustre client failed\\\\\\\"\\\n        \\\\\\n        \\\\ && exit 1\\\\necho \\\\\\\"FSx Lustre test passed\\\\\\\"\\\\n\\\"\\n    name:\\\n        \\ FSxLustre\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n     \\\n        \\ - \\\"set -vx\\\\nif [ {{ validate.ArmPLSupported.outputs.stdout }} == true\\\n        \\ ]; then\\\\n\\\\\\n        \\\\  echo \\\\\\\"Checking gcc version and module loaded...\\\\\\\n        \\\"\\\\n  unset MODULEPATH\\\\n\\\\\\n        \\\\  source /etc/profile.d/modules.sh\\\\\\\n        n  (module avail)2>&1 | grep armpl/{{\\\\\\n        \\\\ validate.ArmPLVersion.outputs.stdout\\\n        \\ }}\\\\n  [[ $? -ne 0 ]] && echo \\\\\\\"Check\\\\\\n        \\\\ armpl version failed\\\\\\\n        \\\" && exit 1\\\\n  module load armpl/{{ validate.ArmPLVersion.outputs.stdout\\\\\\\n        \\n        \\\\ }}\\\\n  gcc --version | grep {{ validate.ArmPLGCCVersion.outputs.stdout\\\n        \\ }}\\\\n\\\\\\n        \\\\  [[ $? -ne 0 ]] && echo \\\\\\\"Check gcc version for armpl\\\n        \\ failed\\\\\\\" && exit 1\\\\n\\\\\\n        \\\\  (module list)2>&1 | grep armpl/{{\\\n        \\ validate.ArmPLVersion.outputs.stdout\\\\\\n        \\\\ }}_gcc-{{ validate.ArmPLGCCVersion.outputs.stdout\\\n        \\ }}\\\\n  [[ $? -ne 0 ]] &&\\\\\\n        \\\\ echo \\\\\\\"Check armpl module failed\\\\\\\n        \\\" && exit 1\\\\n  (module list)2>&1 | grep\\\\\\n        \\\\ armpl/gcc-{{ validate.ArmPLGCCVersion.outputs.stdout\\\n        \\ }}\\\\n  [[ $? -ne 0 ]]\\\\\\n        \\\\ && echo \\\\\\\"Check gcc module failed\\\\\\\n        \\\" && exit 1\\\\n  echo \\\\\\\"ArmPL test passed\\\\\\\"\\\\\\n        \\\\nfi\\\\n\\\"\\n  \\\n        \\  name: ArmPL\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n  \\\n        \\    - 'set -vx\\n\\n        echo \\\"Checking python3 installed...\\\"\\n\\n    \\\n        \\    which python3\\n\\n        [[ $? -ne 0 ]] && echo \\\"Python3 is not installed\\\"\\\n        \\ && exit 1\\n\\n        echo \\\"Python test passed\\\"\\n\\n        '\\n    name:\\\n        \\ Python\\n  - action: ExecuteBash\\n    inputs:\\n      commands:\\n      - \\\"\\\n        set -vx\\\\nPLATFORM='{{ validate.PlatformName.outputs.stdout }}'\\\\nif [ ${PLATFORM}\\\\\\\n        \\n        \\\\ != DEBIAN ]; then\\\\n  echo \\\\\\\"Checking dpkg is not installed\\\n        \\ on non-debian\\\\\\n        \\\\ OS...\\\\\\\"\\\\n  if command -v dpkg &> /dev/null;\\\n        \\ then\\\\n    echo \\\\\\\"ERROR: dpkg\\\\\\n        \\\\ found on non-Debian system\\\\\\\n        \\\" && exit 1\\\\n  fi\\\\n  echo \\\\\\\"dpkg test passed\\\\\\\"\\\\\\n        \\\\nfi\\\\n\\\"\\\n        \\n    name: DPKG\\nschemaVersion: 1.0\\n\"\n      Description: Validate ParallelCluster AMI\n      Name:\n        Fn::Join:\n        - ''\n        - - ParallelClusterImage-Validate-\n          - Fn::Select:\n            - 2\n            - Fn::Split:\n              - /\n              - Ref: AWS::StackId\n      Platform: Linux\n      Tags:\n        Environment: ue2\n        Name: eg-ue2-test-example\n        Namespace: eg\n        ParentAmiId: ami-0bf136df2e5a2e3a5\n        ParentAmiName: Deep Learning AMI GPU TensorFlow 2.8.0 Amazon Linux 2 20220404\n        Stage: test\n        parallelcluster:image_id: bioanalyze-pcluster-3-1-2--deep-learning-ami-gpu-tensorflow-2-8-0-alinux2-20220404\n        parallelcluster:image_name: BioAnalyze PCluster 3.1.2 Deep Learning AMI GPU\n          TensorFlow 2.8.0 Amazon Linux 2 20220404\n      Version: 3.1.2\n    Type: AWS::ImageBuilder::Component\n",
    "StagesAvailable": [
        "Original",
        "Processed"
    ]
}
